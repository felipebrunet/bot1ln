

State 0:
Oferentes publican ofertas de traslados (Origen, destino, mercancia, monto ofrecido, correo de destinatario). Correo de destinatario es registrado oculto en oferta.
Motos revisan ofertas de traslados (Origen, destino, mercancia, monto ofrecido)

State 1:
Moto acepta oferta. Genera invoice regular 1 y lo pega en la app.
App avisa a oferente. App genera invoice hodl 2 con el hash asociado al invoice 1.

State 2:
Oferente Paga invoice hodl 2 y dinero queda retenido en app. (App no posee pre-imagen asociada al invoice por lo que no puede cobrar).
App avisa a moto que su dinero esta resguardado y que puede ir a retirar el pedido.

State 3: 
Moto pasa a retirar el pedido y realiza despacho hasta destinatario.

State 4: Cuando moto ha entregado el pedido, notifica a la app.
App notifica a destinatario con un email, que destinatario responde con 1 click ("recibido ok")

State 5: App paga invoice regular 1. Moto termina su participacion

State 6: App conoce pre-imagen de invoice regular 1. App libera invoice hodl 2 y cobra a oferente.

Ciclo terminado. 





Ejemplo

"Pago delivery pedido de comida urbano por el dia (< 24h de duracion). Servicio con costo 6000 sats (2.000 clp aprox)"

1. Pago desde app a moto
Invoice 1 (regular invoice) desde moto hacia app por 6000 sats (Para pago desde app a moto).
Invoice generado por wallet de moto (ej. Wallet of Satoshi. Este invoice expira en 24h por lo que 
deliveries diarios estan ok)

INVOICE 1: lntb60u1pjkgz5app5esc74utquaux6r6tzu79nrvvpq65kct3dk5g2m6ghcn7qvdvhlzsdqqcqzzsxqyz5vqsp53sz3asl2g5hg50lt5p5avez74tpwzuadnntcs4htxwuglze4w0yq9qyyssqfmstqm5mujlja0ltthysa2l4szkqt5dt8gnaldpzahdrdsygz5ckh8f59ahlwa7hjvjae3j483ztzdg9ce89k3z7zh65gfa3tgagsaspt9txff 
Dato clave: Invoice payment hash asociado: cc31eaf160e7786d0f4b173c598d8c08354b61716da8856f48be27e031acbfc5

El payment hash es un dato que está dentro del invoice (hay que decodificarlo, pero eso lo hace cualquier programa, como LND o cualquier aplicacion web). No hay riesgo en el conocimiento del hash.
Comando en App para decodificar (Nodo LND):

./umbrel/scripts/app compose lightning exec lnd lncli -n testnet decodepayreq lntb60u1pjkgz5app5esc74utquaux6r6tzu79nrvvpq65kct3dk5g2m6ghcn7qvdvhlzsdqqcqzzsxqyz5vqsp53sz3asl2g5hg50lt5p5avez74tpwzuadnntcs4htxwuglze4w0yq9qyyssqfmstqm5mujlja0ltthysa2l4szkqt5dt8gnaldpzahdrdsygz5ckh8f59ahlwa7hjvjae3j483ztzdg9ce89k3z7zh65gfa3tgagsaspt9txff

Este invoice no se pagará aún. Solo se pagará cuando el destinatario del envío ha dado su OK.


2. Pago desde cliente a app con un "hodl invoice".
La App es una aplicacion telegram que a su vez opera por debajo un full node de BTC y BTC lightning con el software LND con canales lightning operativos.
 
Invoice 2 (hodl invoice) desde app a cliente por 6000 sats (Para pago desde cliente a app)
Accion clave: hodl invoice es generado por software LND con el mismo payment hash del invoice 1, que es:
cc31eaf160e7786d0f4b173c598d8c08354b61716da8856f48be27e031acbfc5
commando LND:
./umbrel/scripts/app compose lightning exec lnd lncli -n testnet addholdinvoice cc31eaf160e7786d0f4b173c598d8c08354b61716da8856f48be27e031acbfc5 --memo "pago_delivery" --amt 6000

El invoice resultante es:
INVOICE 2: 
lntb60u1pjkgz62pp5esc74utquaux6r6tzu79nrvvpq65kct3dk5g2m6ghcn7qvdvhlzsdq4wpskwm6lv3jkc6tkv4e8jcqzzsxqyz5vqsp56g7sfsvend6d3zp842f8w4yks66h7zkh0j0jh39kyv5s4unft8qq9qyyssqhlwc4ja0wl9q32p3awv4yj086k2xem2lu9ttmejh4lpy3eawtv7zfnzxer9c2stjrvlhqda0z035x8j2ypkzhkl25tcfhjgdxjv2gtgp0mcw37

Lógicamente, al decodificar el invoice, si bien el pubkey (id del nodo destinatario) es distinto (ya que corresponde al nodo de la app), el payment hash es el mismo que en el invoice 1. 

Luego, el pago del invoice 2 podrá hacerse si y sólo si el pago del invoice 1 se ha realizado.

Cliente con su wallet (ej. Wallet of Satoshi) paga Invoice 2 hacia la App, pero al ser un hodl invoice, el monto queda suspendido (porque la App no ha podido revelar la pre-imagen, ya que no la posee), de modo que el monto no es controlado por la app todavía (sigue en custodia del cliente). De hecho si pasa un cierto tiempo sin que se entregue la pre-imagen, el monto volverá al cliente, y la app no podrá evitarlo.

Sólo cuando el moto ha entregado el encargo, y sólo si el destinatario ha recibido el encargo dando un OK, entonces
la app pagará el Invoice 1

Comando para pagar invoice 1
./umbrel/scripts/app compose lightning exec lnd lncli -n testnet payinvoice lntb60u1pjkgz5app5esc74utquaux6r6tzu79nrvvpq65kct3dk5g2m6ghcn7qvdvhlzsdqqcqzzsxqyz5vqsp53sz3asl2g5hg50lt5p5avez74tpwzuadnntcs4htxwuglze4w0yq9qyyssqfmstqm5mujlja0ltthysa2l4szkqt5dt8gnaldpzahdrdsygz5ckh8f59ahlwa7hjvjae3j483ztzdg9ce89k3z7zh65gfa3tgagsaspt9txff

Pago se realizará. Moto ha terminado su participación.
Al hacer el pago, la wallet del moto (ej Wallet of Satoshi) devolverá a la App la pre-imagen tan ansiada (dato relevante: la "pre-imagen" es el numero primitivo cuyo hash es el "payment hash")

La pre imagen es el siguiente numero ("numero" que está codificado en hexadecimal)
b1347f7b8f1636726b03122a38bacae34ceaaa74353f089a76fb8caac4e7779c

Finalmente, la app hará el cobro al cliente, liquidando el invoice y recibiendo los fondos. Esto se hace con el siguiente comando:

./umbrel/scripts/app compose lightning exec lnd lncli -n testnet settleinvoice b1347f7b8f1636726b03122a38bacae34ceaaa74353f089a76fb8caac4e7779c

La wallet del cliente (ej. Wallet of Satoshi) ya verá que el pago está hecho, y el monto se ha descontado de su saldo.

Fin.

